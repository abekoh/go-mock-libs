// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	examination "github.com/abekoh/go-mock-libs/domain/model/examination"
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx, userId
func (_m *Repository) GetAll(ctx context.Context, userId uuid.UUID) (examination.ExaminationList, error) {
	ret := _m.Called(ctx, userId)

	var r0 examination.ExaminationList
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) examination.ExaminationList); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(examination.ExaminationList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, exam
func (_m *Repository) Save(ctx context.Context, exam examination.Examination) error {
	ret := _m.Called(ctx, exam)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, examination.Examination) error); ok {
		r0 = rf(ctx, exam)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
